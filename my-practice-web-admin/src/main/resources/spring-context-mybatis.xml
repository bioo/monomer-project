<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:p="http://www.springframework.org/schema/p" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop.xsd ">

<!-- 配置 SqlSession -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!-- 用于配置对应实体类所在的包，多个 package 之间可以用 ',' 号分割 -->
        <property name="typeAliasesPackage" value="com.practice.my.practice.web.domain"/>
        <property name="configLocation" value="classpath:/mybatis-config.xml" />
        <!-- 用于配置对象关系映射配置文件所在目录 -->
        <property name="mapperLocations"  >
            <list>
                <value>classpath*:com/practice/my/practice/web/admin/**/mapper/*.xml</value>
            </list>
        </property>
    </bean>

    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory" />
    </bean>
    <bean id="baseMybatisDao" class="com.practice.my.practice.web.admin.core.mybatis.BaseMybatisDao" >
        <property name="sqlSessionFactory" ref="sqlSessionFactory" />
    </bean>
    <!-- 扫描 Mapper -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.practice.my.practice.web.admin.dao" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>

    <!-- 事务： http://blog.csdn.net/zhaofuwu/article/details/52432883 -->

    <!-- Spring事务类型详解：

        PROPAGATION_REQUIRED 支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。
        PROPAGATION_SUPPORTS 支持当前事务，如果当前没有事务，就以非事务方式执行。
        PROPAGATION_MANDATORY 支持当前事务，如果当前没有事务，就抛出异常。
        PROPAGATION_REQUIRES_NEW 新建事务，如果当前存在事务，把当前事务挂起。
        PROPAGATION_NOT_SUPPORTED  以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。
        PROPAGATION_NEVER 以非事务方式执行，如果当前存在事务，则抛出异常。
        PROPAGATION_NESTED 如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则进行与PROPAGATION_REQUIRED类似的操作。

    -->
    <!-- 1、编程式事务  启用对事务注解的支持-->
    <tx:annotation-driven transaction-manager="transactionManager" />
    <!-- 2、 声明式事务-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!-- 定义事务传播属性 -->
        <tx:attributes>
            <tx:method name="insert*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="set*" propagation="REQUIRED" />
            <tx:method name="delete*" propagation="REQUIRED" />
            <tx:method name="get*" propagation="REQUIRED" read-only="true" />
            <tx:method name="list*" propagation="REQUIRED" read-only="true" />
            <tx:method name="count*" propagation="REQUIRED" read-only="true" />
            <tx:method name="*"/> <!-- 其他方法默认读写 -->
        </tx:attributes>
    </tx:advice>
    <!-- 配置事务切面 (aop) -->
    <!-- http://www.cnblogs.com/rainy-shurun/p/5195439.html
        举例说明:

        任意公共方法的执行： execution(public * *(..))
        任何一个以“set”开始的方法的执行： execution(* set*(..))
        AccountService 接口的任意方法的执行： execution(* com.xyz.service.AccountService.*(..))
        定义在service包里的任意方法的执行： execution(* com.xyz.service.*.*(..))
        定义在service包和所有子包里的任意类的任意方法的执行： execution(* com.xyz.service..*.*(..))
        定义在pointcutexp包和所有子包里的JoinPointObjP2类的任意方法的执行： execution(* com.test.spring.aop.pointcutexp..JoinPointObjP2.*(..))")

        最靠近(..)的为方法名,靠近.*(..))的为类名或者接口名,如上例的JoinPointObjP2.*(..))

    -->

    <aop:config>
        <aop:pointcut id="serviceMethods" expression="execution(* com.practice.my.practice.web.admin.service.impl.*.*(..))" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethods" />
    </aop:config>

</beans>